# -*- coding: utf-8 -*-
"""Copy of Project on ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DaZF0N01XbDhSqV_7GfUeT9gEmhOeCzj
"""



"""# Instalation and importation"""

import tensorflow as tf

print (tf.__version__)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split



"""# Data Preprocessing"""

data=pd.read_csv('/content/heart.csv')

data.head()

X = data.drop(columns=['target'])
y = data['target']

categorical_column = X.select_dtypes(include=['object']).columns

x_train, x_test, y_train, y_test = train_test_split(X, y, train_size=0.2)

y_train.shape

y_train = np.array(y_train)
y_test = np.array(y_test)

"""#Building the model"""

model = tf.keras.models.Sequential()

model.add(tf.keras.layers.Dense(units=64, activation="relu", input_shape=(13,)))

model.add(tf.keras.layers.BatchNormalization())

model.add(tf.keras.layers.Dense(units=50, activation="relu"))

model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.BatchNormalization())

model.add(tf.keras.layers.Dense(units=28, activation="relu"))

model.add(tf.keras.layers.Dense(units=1, activation="sigmoid"))

model.summary()



"""# Training the model"""

model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

history = model.fit(x_train, y_train,  epochs=50, validation_data=(x_test, y_test))

test_loss, test_accuracy  = model.evaluate(x_test, y_test)

print(f"Test accuracy: {test_accuracy * 100:.2f}%")

y_pred = (model.predict(x_test)>0.5).astype('int32')

print(y_test[100]),  print(y_pred[100])

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
cm

acc_cn = accuracy_score(y_test, y_pred)
acc_cn

def learning_curve(history, epoch):
  epoch_range = range(1, epoch +1)
  accuracy = history.history["accuracy"]
  val_accuracy = history.history["val_accuracy"]

  loss = history.history["loss"]
  val_loss = history.history["val_loss"]

  plt.plot(epoch_range, accuracy)
  plt.plot(epoch_range, val_accuracy)
  plt.plot(epoch_range, accuracy)
  plt.plot(epoch_range, val_accuracy)
  plt.title("Model Accuracy")
  plt.xlabel("Epoch")
  plt.ylabel("Accuracy")
  plt.legend(["train", "val"], loc="upper left")
  plt.show()

  plt.plot(epoch_range, loss)
  plt.plot(epoch_range, val_loss)
  plt.plot(epoch_range, loss)
  plt.plot(epoch_range, val_loss)
  plt.title("Model loss")
  plt.xlabel("Epoch")
  plt.ylabel("loss")
  plt.legend(["train", "val"], loc="upper left")
  plt.show()

learning_curve(history, 50)

